package br.bti.allandemiranda.forex.model.analysis;

import br.bti.allandemiranda.forex.model.utils.Candlestick;
import br.bti.allandemiranda.forex.model.utils.Chart;
import br.bti.allandemiranda.forex.model.utils.CurrencyExchange;
import br.bti.allandemiranda.forex.model.utils.CurrencyPair;
import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

class WilliamsPercentRangeTest {

  private static final String EUR = "EUR";
  private static final String USD = "USD";
  private final CurrencyExchange currencyExchange = Mockito.mock(CurrencyExchange.class);
  private final Chart chart = new Chart(currencyExchange);

  private final CurrencyPair currencyPair = new CurrencyPair(EUR, USD);
  private final List<Double> list = List.of(1.0, 2.0, 5.0, 6.0, 3.0, 8.0, 12.0, 12.0, 10.0, 7.0, 6.0, 5.0, 5.0, 6.0, 20.0, 8.0, 1.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 16.0, 10.0, 11.0, 12.0, 50.0, 2.0, 3.0, 4.0, 5.0,
      8.0, 8.0, 8.0, 8.0, 8.0,1.0, 2.0, 5.0, 6.0, 3.0, 8.0, 12.0, 12.0, 10.0, 7.0, 6.0, 5.0, 5.0, 6.0, 20.0, 8.0, 1.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 16.0, 10.0, 11.0, 12.0, 50.0, 2.0, 3.0, 4.0, 5.0,
      8.0, 8.0, 8.0, 8.0, 8.0,1.0, 2.0, 5.0, 6.0, 3.0, 8.0, 12.0, 12.0, 10.0, 7.0, 6.0, 5.0, 5.0, 6.0, 20.0, 8.0, 1.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 16.0, 10.0, 11.0, 12.0, 50.0, 2.0, 3.0, 4.0, 5.0,
      8.0, 8.0, 8.0, 8.0, 8.0,1.0, 2.0, 5.0, 6.0, 3.0, 8.0, 12.0, 12.0, 10.0, 7.0, 6.0, 5.0, 5.0, 6.0, 20.0, 8.0, 1.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 16.0, 10.0, 11.0, 12.0, 50.0, 2.0, 3.0, 4.0, 5.0,
      8.0, 8.0, 8.0, 8.0, 8.0);

  @BeforeEach
  void setUp() {
    for (Double value : list) {
      chart.getCandlestickList().add(new Candlestick(value, value, value, value, 1, LocalDateTime.now(), currencyPair));
    }
  }

  @Test
  void getWilliamsPercent() {
    // given
    String finalList = "[null, null, null, null, null, null, null, null, null, null, -60.0, -77.77777777777779, -77.77777777777779, -66.66666666666666, -0.0, -80.0, -100.0, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -0.0, -11.76470588235294, -100.0, -87.5, -75.0, -0.0, -100.0, -97.91666666666666, -95.83333333333334, -93.75, -87.5, -87.5, -87.5, -87.5, -87.5, -100.0, -85.71428571428571, -42.857142857142854, -28.57142857142857, -71.42857142857143, -0.0, -0.0, -0.0, -18.181818181818183, -45.45454545454545, -60.0, -77.77777777777779, -77.77777777777779, -66.66666666666666, -0.0, -80.0, -100.0, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -0.0, -11.76470588235294, -100.0, -87.5, -75.0, -0.0, -100.0, -97.91666666666666, -95.83333333333334, -93.75, -87.5, -87.5, -87.5, -87.5, -87.5, -100.0, -85.71428571428571, -42.857142857142854, -28.57142857142857, -71.42857142857143, -0.0, -0.0, -0.0, -18.181818181818183, -45.45454545454545, -60.0, -77.77777777777779, -77.77777777777779, -66.66666666666666, -0.0, -80.0, -100.0, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -0.0, -11.76470588235294, -100.0, -87.5, -75.0, -0.0, -100.0, -97.91666666666666, -95.83333333333334, -93.75, -87.5, -87.5, -87.5, -87.5, -87.5, -100.0, -85.71428571428571, -42.857142857142854, -28.57142857142857, -71.42857142857143, -0.0, -0.0, -0.0, -18.181818181818183, -45.45454545454545, -60.0, -77.77777777777779, -77.77777777777779, -66.66666666666666, -0.0, -80.0, -100.0, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -10.526315789473683, -0.0, -11.76470588235294, -100.0, -87.5, -75.0, -0.0, -100.0, -97.91666666666666, -95.83333333333334, -93.75, -87.5, -87.5, -87.5, -87.5, -87.5]";
    // when
    LinkedList<Double> williamsPercentRangeList = new WilliamsPercentRange(chart).getWilliamsPercent(10);
    // then
    Assertions.assertEquals(finalList, williamsPercentRangeList.toString());
  }
}