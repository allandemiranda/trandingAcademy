package br.bti.allandemiranda.forex.model.analysis;

import java.time.LocalDateTime;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.lang3.tuple.Triple;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * The type Macd test.
 *
 * @author Allan de Miranda Silva
 * @version 1.0.0
 */
class MACDTest {

  LinkedList<Pair<LocalDateTime, Double>> closeList = new LinkedList<>();

  @BeforeEach
  void setUp() {
    LinkedList<Double> doubleList = new LinkedList<>(
        List.of(1.0, 2.0, 5.0, 6.0, 3.0, 8.0, 12.0, 12.0, 10.0, 7.0, 6.0, 5.0, 5.0, 6.0, 20.0, 8.0, 1.0,
            18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 16.0, 10.0, 11.0, 12.0, 50.0, 2.0, 3.0, 4.0,
            5.0, 8.0, 8.0, 8.0, 8.0, 8.0));
    closeList = doubleList.stream().map(aDouble -> Pair.of(LocalDateTime.now(), aDouble))
        .collect(Collectors.toCollection(LinkedList::new));
  }

  @Test
  void getMACD() {
    // given
    String resultList = "[(null,null,null), (null,null,null), (null,null,null), (null,1.7777777777777777,null), (null,0.45925925925925926,null), (null,1.4064197530864195,null), (null,2.287473251028806,null), (null,1.853691083676269,null), (-0.6813671086724602,0.739283694558754,1.4206508032312142), (-1.3581363607464025,-0.4807401018137494,0.8773962589326533), (-1.2432931615742169,-0.8632141672712503,0.3800789943029666), (-0.9687601405190838,-0.9761852024237507,-0.0074250619046669075), (-0.5221702096927976,-0.7384633554745834,-0.21629314578178588), (-0.0078825801260064,-0.22732875795819485,-0.21944617783218845), (2.7773561963091344,3.6688524970006,0.8914963006914653), (-0.4441201561185226,0.2697280821255337,0.7138482382440563), (-2.1875279959478657,-2.3486909560829554,-0.1611629601350899), (1.74888508430897,2.287276157897468,0.5383910735884979), (1.4758129988088557,2.604529271920896,1.1287162731120401), (0.6033732017390241,1.973438755546674,1.3700655538076498), (-0.03506802596304692,1.320970317459384,1.356038343422431), (-0.36987176064500327,0.8382178785194263,1.2080896391644296), (-0.49281929717012685,0.518142623126252,1.0109619202963789), (-0.49643265315411544,0.31595620588061735,0.8123888590347328), (-0.4436606605986242,0.19126393419665888,0.6349245947952831), (-0.7520972600389467,-0.4180115692592423,0.3340856907797044), (-1.6874875778054723,-2.0283969181479566,-0.34090934034248443), (-0.8585658114836383,-1.542901476419578,-0.6843356649359398), (-0.05954261625672019,-0.767695327695348,-0.7081527114386278), (7.4525362149096805,9.725397989434924,2.2728617745252437), (-4.173060418223984,-3.5694228109883337,0.6036376072356504), (-4.0096513062226755,-5.009874221476095,-1.0002229152534197), (-1.9250774732809068,-3.6953313778466894,-1.7702539045657826), (-0.29291466937802957,-2.180334441695024,-1.8874197723169943), (0.9939337397411736,-0.4959125366793513,-1.489846276420525), (1.0450439027562872,-0.026784812561722937,-1.0718287153180102), (0.8185800459020991,0.07418334894492862,-0.7443966969571705), (0.5849938941557972,0.07459475486094558,-0.5103991392948516), (0.4037030290781532,0.05478510141456283,-0.34891792766359037)]";
    // when
    List<Pair<LocalDateTime, Triple<Double, Double, Double>>> result = MACD.getMACD(2, 4, 6, closeList);
    // then
    List<Triple<Double, Double, Double>> tranfList = result.stream().map(Pair::getRight).toList();
    Assertions.assertEquals(resultList, tranfList.toString());
  }
}